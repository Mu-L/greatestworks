// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v4.25.1
// source: proto/chat.proto

package chat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common "greatestworks/internal/proto/common"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 消息类型枚举
type MessageType int32

const (
	MessageType_MESSAGE_TYPE_UNSPECIFIED  MessageType = 0
	MessageType_MESSAGE_TYPE_TEXT         MessageType = 1 // 文本消息
	MessageType_MESSAGE_TYPE_EMOJI        MessageType = 2 // 表情消息
	MessageType_MESSAGE_TYPE_IMAGE        MessageType = 3 // 图片消息
	MessageType_MESSAGE_TYPE_FILE         MessageType = 4 // 文件消息
	MessageType_MESSAGE_TYPE_VOICE        MessageType = 5 // 语音消息
	MessageType_MESSAGE_TYPE_SYSTEM       MessageType = 6 // 系统消息
	MessageType_MESSAGE_TYPE_ANNOUNCEMENT MessageType = 7 // 公告消息
	MessageType_MESSAGE_TYPE_COMMAND      MessageType = 8 // 命令消息
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_UNSPECIFIED",
		1: "MESSAGE_TYPE_TEXT",
		2: "MESSAGE_TYPE_EMOJI",
		3: "MESSAGE_TYPE_IMAGE",
		4: "MESSAGE_TYPE_FILE",
		5: "MESSAGE_TYPE_VOICE",
		6: "MESSAGE_TYPE_SYSTEM",
		7: "MESSAGE_TYPE_ANNOUNCEMENT",
		8: "MESSAGE_TYPE_COMMAND",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED":  0,
		"MESSAGE_TYPE_TEXT":         1,
		"MESSAGE_TYPE_EMOJI":        2,
		"MESSAGE_TYPE_IMAGE":        3,
		"MESSAGE_TYPE_FILE":         4,
		"MESSAGE_TYPE_VOICE":        5,
		"MESSAGE_TYPE_SYSTEM":       6,
		"MESSAGE_TYPE_ANNOUNCEMENT": 7,
		"MESSAGE_TYPE_COMMAND":      8,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_chat_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_proto_chat_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{0}
}

// 用户状态枚举
type UserStatus int32

const (
	UserStatus_USER_STATUS_UNSPECIFIED UserStatus = 0
	UserStatus_USER_STATUS_ONLINE      UserStatus = 1 // 在线
	UserStatus_USER_STATUS_AWAY        UserStatus = 2 // 离开
	UserStatus_USER_STATUS_BUSY        UserStatus = 3 // 忙碌
	UserStatus_USER_STATUS_INVISIBLE   UserStatus = 4 // 隐身
	UserStatus_USER_STATUS_OFFLINE     UserStatus = 5 // 离线
)

// Enum value maps for UserStatus.
var (
	UserStatus_name = map[int32]string{
		0: "USER_STATUS_UNSPECIFIED",
		1: "USER_STATUS_ONLINE",
		2: "USER_STATUS_AWAY",
		3: "USER_STATUS_BUSY",
		4: "USER_STATUS_INVISIBLE",
		5: "USER_STATUS_OFFLINE",
	}
	UserStatus_value = map[string]int32{
		"USER_STATUS_UNSPECIFIED": 0,
		"USER_STATUS_ONLINE":      1,
		"USER_STATUS_AWAY":        2,
		"USER_STATUS_BUSY":        3,
		"USER_STATUS_INVISIBLE":   4,
		"USER_STATUS_OFFLINE":     5,
	}
)

func (x UserStatus) Enum() *UserStatus {
	p := new(UserStatus)
	*p = x
	return p
}

func (x UserStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_chat_proto_enumTypes[1].Descriptor()
}

func (UserStatus) Type() protoreflect.EnumType {
	return &file_proto_chat_proto_enumTypes[1]
}

func (x UserStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserStatus.Descriptor instead.
func (UserStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{1}
}

// 用户角色枚举
type UserRole int32

const (
	UserRole_USER_ROLE_UNSPECIFIED UserRole = 0
	UserRole_USER_ROLE_MEMBER      UserRole = 1 // 普通成员
	UserRole_USER_ROLE_MODERATOR   UserRole = 2 // 版主
	UserRole_USER_ROLE_ADMIN       UserRole = 3 // 管理员
	UserRole_USER_ROLE_OWNER       UserRole = 4 // 所有者
)

// Enum value maps for UserRole.
var (
	UserRole_name = map[int32]string{
		0: "USER_ROLE_UNSPECIFIED",
		1: "USER_ROLE_MEMBER",
		2: "USER_ROLE_MODERATOR",
		3: "USER_ROLE_ADMIN",
		4: "USER_ROLE_OWNER",
	}
	UserRole_value = map[string]int32{
		"USER_ROLE_UNSPECIFIED": 0,
		"USER_ROLE_MEMBER":      1,
		"USER_ROLE_MODERATOR":   2,
		"USER_ROLE_ADMIN":       3,
		"USER_ROLE_OWNER":       4,
	}
)

func (x UserRole) Enum() *UserRole {
	p := new(UserRole)
	*p = x
	return p
}

func (x UserRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserRole) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_chat_proto_enumTypes[2].Descriptor()
}

func (UserRole) Type() protoreflect.EnumType {
	return &file_proto_chat_proto_enumTypes[2]
}

func (x UserRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserRole.Descriptor instead.
func (UserRole) EnumDescriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{2}
}

// 举报原因枚举
type ReportReason int32

const (
	ReportReason_REPORT_REASON_UNSPECIFIED   ReportReason = 0
	ReportReason_REPORT_REASON_SPAM          ReportReason = 1 // 垃圾信息
	ReportReason_REPORT_REASON_HARASSMENT    ReportReason = 2 // 骚扰
	ReportReason_REPORT_REASON_HATE_SPEECH   ReportReason = 3 // 仇恨言论
	ReportReason_REPORT_REASON_INAPPROPRIATE ReportReason = 4 // 不当内容
	ReportReason_REPORT_REASON_CHEATING      ReportReason = 5 // 作弊
	ReportReason_REPORT_REASON_OTHER         ReportReason = 6 // 其他
)

// Enum value maps for ReportReason.
var (
	ReportReason_name = map[int32]string{
		0: "REPORT_REASON_UNSPECIFIED",
		1: "REPORT_REASON_SPAM",
		2: "REPORT_REASON_HARASSMENT",
		3: "REPORT_REASON_HATE_SPEECH",
		4: "REPORT_REASON_INAPPROPRIATE",
		5: "REPORT_REASON_CHEATING",
		6: "REPORT_REASON_OTHER",
	}
	ReportReason_value = map[string]int32{
		"REPORT_REASON_UNSPECIFIED":   0,
		"REPORT_REASON_SPAM":          1,
		"REPORT_REASON_HARASSMENT":    2,
		"REPORT_REASON_HATE_SPEECH":   3,
		"REPORT_REASON_INAPPROPRIATE": 4,
		"REPORT_REASON_CHEATING":      5,
		"REPORT_REASON_OTHER":         6,
	}
)

func (x ReportReason) Enum() *ReportReason {
	p := new(ReportReason)
	*p = x
	return p
}

func (x ReportReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportReason) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_chat_proto_enumTypes[3].Descriptor()
}

func (ReportReason) Type() protoreflect.EnumType {
	return &file_proto_chat_proto_enumTypes[3]
}

func (x ReportReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportReason.Descriptor instead.
func (ReportReason) EnumDescriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{3}
}

// 发送消息请求
type SendMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SenderId      string                 `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Channel       common.ChatChannel     `protobuf:"varint,3,opt,name=channel,proto3,enum=greatestworks.common.ChatChannel" json:"channel,omitempty"`
	TargetId      string                 `protobuf:"bytes,4,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"` // 私聊目标用户ID或频道ID
	MessageType   MessageType            `protobuf:"varint,5,opt,name=message_type,json=messageType,proto3,enum=greatestworks.chat.MessageType" json:"message_type,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	mi := &file_proto_chat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{0}
}

func (x *SendMessageRequest) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *SendMessageRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendMessageRequest) GetChannel() common.ChatChannel {
	if x != nil {
		return x.Channel
	}
	return common.ChatChannel(0)
}

func (x *SendMessageRequest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *SendMessageRequest) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_MESSAGE_TYPE_UNSPECIFIED
}

func (x *SendMessageRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 发送消息响应
type SendMessageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Common        *common.CommonResponse `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	MessageId     string                 `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	mi := &file_proto_chat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{1}
}

func (x *SendMessageResponse) GetCommon() *common.CommonResponse {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *SendMessageResponse) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *SendMessageResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 获取消息历史请求
type GetMessagesRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Channel         common.ChatChannel     `protobuf:"varint,1,opt,name=channel,proto3,enum=greatestworks.common.ChatChannel" json:"channel,omitempty"`
	ChannelId       string                 `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId          string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Limit           int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	BeforeTimestamp int64                  `protobuf:"varint,5,opt,name=before_timestamp,json=beforeTimestamp,proto3" json:"before_timestamp,omitempty"`
	AfterTimestamp  int64                  `protobuf:"varint,6,opt,name=after_timestamp,json=afterTimestamp,proto3" json:"after_timestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetMessagesRequest) Reset() {
	*x = GetMessagesRequest{}
	mi := &file_proto_chat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesRequest) ProtoMessage() {}

func (x *GetMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesRequest.ProtoReflect.Descriptor instead.
func (*GetMessagesRequest) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{2}
}

func (x *GetMessagesRequest) GetChannel() common.ChatChannel {
	if x != nil {
		return x.Channel
	}
	return common.ChatChannel(0)
}

func (x *GetMessagesRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *GetMessagesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetMessagesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetMessagesRequest) GetBeforeTimestamp() int64 {
	if x != nil {
		return x.BeforeTimestamp
	}
	return 0
}

func (x *GetMessagesRequest) GetAfterTimestamp() int64 {
	if x != nil {
		return x.AfterTimestamp
	}
	return 0
}

// 获取消息历史响应
type GetMessagesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Common        *common.CommonResponse `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Messages      []*ChatMessage         `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	Pagination    *common.PaginationInfo `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMessagesResponse) Reset() {
	*x = GetMessagesResponse{}
	mi := &file_proto_chat_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesResponse) ProtoMessage() {}

func (x *GetMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesResponse.ProtoReflect.Descriptor instead.
func (*GetMessagesResponse) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{3}
}

func (x *GetMessagesResponse) GetCommon() *common.CommonResponse {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *GetMessagesResponse) GetMessages() []*ChatMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GetMessagesResponse) GetPagination() *common.PaginationInfo {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// 加入聊天频道请求
type JoinChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Channel       common.ChatChannel     `protobuf:"varint,2,opt,name=channel,proto3,enum=greatestworks.common.ChatChannel" json:"channel,omitempty"`
	ChannelId     string                 `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Password      string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"` // 如果是私有频道
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinChannelRequest) Reset() {
	*x = JoinChannelRequest{}
	mi := &file_proto_chat_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChannelRequest) ProtoMessage() {}

func (x *JoinChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChannelRequest.ProtoReflect.Descriptor instead.
func (*JoinChannelRequest) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{4}
}

func (x *JoinChannelRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JoinChannelRequest) GetChannel() common.ChatChannel {
	if x != nil {
		return x.Channel
	}
	return common.ChatChannel(0)
}

func (x *JoinChannelRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *JoinChannelRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// 加入聊天频道响应
type JoinChannelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Common        *common.CommonResponse `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	ChannelInfo   *ChannelInfo           `protobuf:"bytes,2,opt,name=channel_info,json=channelInfo,proto3" json:"channel_info,omitempty"`
	OnlineUsers   []*ChatUser            `protobuf:"bytes,3,rep,name=online_users,json=onlineUsers,proto3" json:"online_users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinChannelResponse) Reset() {
	*x = JoinChannelResponse{}
	mi := &file_proto_chat_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChannelResponse) ProtoMessage() {}

func (x *JoinChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChannelResponse.ProtoReflect.Descriptor instead.
func (*JoinChannelResponse) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{5}
}

func (x *JoinChannelResponse) GetCommon() *common.CommonResponse {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *JoinChannelResponse) GetChannelInfo() *ChannelInfo {
	if x != nil {
		return x.ChannelInfo
	}
	return nil
}

func (x *JoinChannelResponse) GetOnlineUsers() []*ChatUser {
	if x != nil {
		return x.OnlineUsers
	}
	return nil
}

// 离开聊天频道请求
type LeaveChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Channel       common.ChatChannel     `protobuf:"varint,2,opt,name=channel,proto3,enum=greatestworks.common.ChatChannel" json:"channel,omitempty"`
	ChannelId     string                 `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveChannelRequest) Reset() {
	*x = LeaveChannelRequest{}
	mi := &file_proto_chat_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveChannelRequest) ProtoMessage() {}

func (x *LeaveChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveChannelRequest.ProtoReflect.Descriptor instead.
func (*LeaveChannelRequest) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{6}
}

func (x *LeaveChannelRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LeaveChannelRequest) GetChannel() common.ChatChannel {
	if x != nil {
		return x.Channel
	}
	return common.ChatChannel(0)
}

func (x *LeaveChannelRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

// 离开聊天频道响应
type LeaveChannelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Common        *common.CommonResponse `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveChannelResponse) Reset() {
	*x = LeaveChannelResponse{}
	mi := &file_proto_chat_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveChannelResponse) ProtoMessage() {}

func (x *LeaveChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveChannelResponse.ProtoReflect.Descriptor instead.
func (*LeaveChannelResponse) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{7}
}

func (x *LeaveChannelResponse) GetCommon() *common.CommonResponse {
	if x != nil {
		return x.Common
	}
	return nil
}

// 创建私聊请求
type CreatePrivateChatRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CreatorId      string                 `protobuf:"bytes,1,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	ParticipantIds []string               `protobuf:"bytes,2,rep,name=participant_ids,json=participantIds,proto3" json:"participant_ids,omitempty"`
	ChatName       string                 `protobuf:"bytes,3,opt,name=chat_name,json=chatName,proto3" json:"chat_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreatePrivateChatRequest) Reset() {
	*x = CreatePrivateChatRequest{}
	mi := &file_proto_chat_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePrivateChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePrivateChatRequest) ProtoMessage() {}

func (x *CreatePrivateChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePrivateChatRequest.ProtoReflect.Descriptor instead.
func (*CreatePrivateChatRequest) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{8}
}

func (x *CreatePrivateChatRequest) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *CreatePrivateChatRequest) GetParticipantIds() []string {
	if x != nil {
		return x.ParticipantIds
	}
	return nil
}

func (x *CreatePrivateChatRequest) GetChatName() string {
	if x != nil {
		return x.ChatName
	}
	return ""
}

// 创建私聊响应
type CreatePrivateChatResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Common        *common.CommonResponse `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	ChatId        string                 `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ChatInfo      *ChannelInfo           `protobuf:"bytes,3,opt,name=chat_info,json=chatInfo,proto3" json:"chat_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePrivateChatResponse) Reset() {
	*x = CreatePrivateChatResponse{}
	mi := &file_proto_chat_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePrivateChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePrivateChatResponse) ProtoMessage() {}

func (x *CreatePrivateChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePrivateChatResponse.ProtoReflect.Descriptor instead.
func (*CreatePrivateChatResponse) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{9}
}

func (x *CreatePrivateChatResponse) GetCommon() *common.CommonResponse {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *CreatePrivateChatResponse) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *CreatePrivateChatResponse) GetChatInfo() *ChannelInfo {
	if x != nil {
		return x.ChatInfo
	}
	return nil
}

// 获取在线用户列表请求
type GetOnlineUsersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       common.ChatChannel     `protobuf:"varint,1,opt,name=channel,proto3,enum=greatestworks.common.ChatChannel" json:"channel,omitempty"`
	ChannelId     string                 `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOnlineUsersRequest) Reset() {
	*x = GetOnlineUsersRequest{}
	mi := &file_proto_chat_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOnlineUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnlineUsersRequest) ProtoMessage() {}

func (x *GetOnlineUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnlineUsersRequest.ProtoReflect.Descriptor instead.
func (*GetOnlineUsersRequest) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{10}
}

func (x *GetOnlineUsersRequest) GetChannel() common.ChatChannel {
	if x != nil {
		return x.Channel
	}
	return common.ChatChannel(0)
}

func (x *GetOnlineUsersRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *GetOnlineUsersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetOnlineUsersRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// 获取在线用户列表响应
type GetOnlineUsersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Common        *common.CommonResponse `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Users         []*ChatUser            `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	Pagination    *common.PaginationInfo `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOnlineUsersResponse) Reset() {
	*x = GetOnlineUsersResponse{}
	mi := &file_proto_chat_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOnlineUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnlineUsersResponse) ProtoMessage() {}

func (x *GetOnlineUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnlineUsersResponse.ProtoReflect.Descriptor instead.
func (*GetOnlineUsersResponse) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{11}
}

func (x *GetOnlineUsersResponse) GetCommon() *common.CommonResponse {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *GetOnlineUsersResponse) GetUsers() []*ChatUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetOnlineUsersResponse) GetPagination() *common.PaginationInfo {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// 设置用户状态请求
type SetUserStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status        UserStatus             `protobuf:"varint,2,opt,name=status,proto3,enum=greatestworks.chat.UserStatus" json:"status,omitempty"`
	StatusMessage string                 `protobuf:"bytes,3,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetUserStatusRequest) Reset() {
	*x = SetUserStatusRequest{}
	mi := &file_proto_chat_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUserStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserStatusRequest) ProtoMessage() {}

func (x *SetUserStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserStatusRequest.ProtoReflect.Descriptor instead.
func (*SetUserStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{12}
}

func (x *SetUserStatusRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SetUserStatusRequest) GetStatus() UserStatus {
	if x != nil {
		return x.Status
	}
	return UserStatus_USER_STATUS_UNSPECIFIED
}

func (x *SetUserStatusRequest) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

// 设置用户状态响应
type SetUserStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Common        *common.CommonResponse `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	NewStatus     UserStatus             `protobuf:"varint,2,opt,name=new_status,json=newStatus,proto3,enum=greatestworks.chat.UserStatus" json:"new_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetUserStatusResponse) Reset() {
	*x = SetUserStatusResponse{}
	mi := &file_proto_chat_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUserStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserStatusResponse) ProtoMessage() {}

func (x *SetUserStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserStatusResponse.ProtoReflect.Descriptor instead.
func (*SetUserStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{13}
}

func (x *SetUserStatusResponse) GetCommon() *common.CommonResponse {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *SetUserStatusResponse) GetNewStatus() UserStatus {
	if x != nil {
		return x.NewStatus
	}
	return UserStatus_USER_STATUS_UNSPECIFIED
}

// 屏蔽用户请求
type BlockUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TargetUserId  string                 `protobuf:"bytes,2,opt,name=target_user_id,json=targetUserId,proto3" json:"target_user_id,omitempty"`
	Block         bool                   `protobuf:"varint,3,opt,name=block,proto3" json:"block,omitempty"` // true=屏蔽, false=解除屏蔽
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockUserRequest) Reset() {
	*x = BlockUserRequest{}
	mi := &file_proto_chat_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserRequest) ProtoMessage() {}

func (x *BlockUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserRequest.ProtoReflect.Descriptor instead.
func (*BlockUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{14}
}

func (x *BlockUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlockUserRequest) GetTargetUserId() string {
	if x != nil {
		return x.TargetUserId
	}
	return ""
}

func (x *BlockUserRequest) GetBlock() bool {
	if x != nil {
		return x.Block
	}
	return false
}

// 屏蔽用户响应
type BlockUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Common        *common.CommonResponse `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockUserResponse) Reset() {
	*x = BlockUserResponse{}
	mi := &file_proto_chat_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserResponse) ProtoMessage() {}

func (x *BlockUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserResponse.ProtoReflect.Descriptor instead.
func (*BlockUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{15}
}

func (x *BlockUserResponse) GetCommon() *common.CommonResponse {
	if x != nil {
		return x.Common
	}
	return nil
}

// 举报消息请求
type ReportMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReporterId    string                 `protobuf:"bytes,1,opt,name=reporter_id,json=reporterId,proto3" json:"reporter_id,omitempty"`
	MessageId     string                 `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Reason        ReportReason           `protobuf:"varint,3,opt,name=reason,proto3,enum=greatestworks.chat.ReportReason" json:"reason,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportMessageRequest) Reset() {
	*x = ReportMessageRequest{}
	mi := &file_proto_chat_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMessageRequest) ProtoMessage() {}

func (x *ReportMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMessageRequest.ProtoReflect.Descriptor instead.
func (*ReportMessageRequest) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{16}
}

func (x *ReportMessageRequest) GetReporterId() string {
	if x != nil {
		return x.ReporterId
	}
	return ""
}

func (x *ReportMessageRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *ReportMessageRequest) GetReason() ReportReason {
	if x != nil {
		return x.Reason
	}
	return ReportReason_REPORT_REASON_UNSPECIFIED
}

func (x *ReportMessageRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// 举报消息响应
type ReportMessageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Common        *common.CommonResponse `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	ReportId      string                 `protobuf:"bytes,2,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportMessageResponse) Reset() {
	*x = ReportMessageResponse{}
	mi := &file_proto_chat_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMessageResponse) ProtoMessage() {}

func (x *ReportMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMessageResponse.ProtoReflect.Descriptor instead.
func (*ReportMessageResponse) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{17}
}

func (x *ReportMessageResponse) GetCommon() *common.CommonResponse {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ReportMessageResponse) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

// 聊天消息
type ChatMessage struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MessageId       string                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	SenderId        string                 `protobuf:"bytes,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	SenderName      string                 `protobuf:"bytes,3,opt,name=sender_name,json=senderName,proto3" json:"sender_name,omitempty"`
	Content         string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Channel         common.ChatChannel     `protobuf:"varint,5,opt,name=channel,proto3,enum=greatestworks.common.ChatChannel" json:"channel,omitempty"`
	ChannelId       string                 `protobuf:"bytes,6,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	MessageType     MessageType            `protobuf:"varint,7,opt,name=message_type,json=messageType,proto3,enum=greatestworks.chat.MessageType" json:"message_type,omitempty"`
	Timestamp       int64                  `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IsEdited        bool                   `protobuf:"varint,9,opt,name=is_edited,json=isEdited,proto3" json:"is_edited,omitempty"`
	EditedTimestamp int64                  `protobuf:"varint,10,opt,name=edited_timestamp,json=editedTimestamp,proto3" json:"edited_timestamp,omitempty"`
	Metadata        map[string]string      `protobuf:"bytes,11,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_proto_chat_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{18}
}

func (x *ChatMessage) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *ChatMessage) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *ChatMessage) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *ChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChatMessage) GetChannel() common.ChatChannel {
	if x != nil {
		return x.Channel
	}
	return common.ChatChannel(0)
}

func (x *ChatMessage) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChatMessage) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_MESSAGE_TYPE_UNSPECIFIED
}

func (x *ChatMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ChatMessage) GetIsEdited() bool {
	if x != nil {
		return x.IsEdited
	}
	return false
}

func (x *ChatMessage) GetEditedTimestamp() int64 {
	if x != nil {
		return x.EditedTimestamp
	}
	return 0
}

func (x *ChatMessage) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 频道信息
type ChannelInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     string                 `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ChannelType   common.ChatChannel     `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3,enum=greatestworks.common.ChatChannel" json:"channel_type,omitempty"`
	MaxUsers      int32                  `protobuf:"varint,5,opt,name=max_users,json=maxUsers,proto3" json:"max_users,omitempty"`
	CurrentUsers  int32                  `protobuf:"varint,6,opt,name=current_users,json=currentUsers,proto3" json:"current_users,omitempty"`
	IsPrivate     bool                   `protobuf:"varint,7,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	OwnerId       string                 `protobuf:"bytes,8,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	ModeratorIds  []string               `protobuf:"bytes,9,rep,name=moderator_ids,json=moderatorIds,proto3" json:"moderator_ids,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelInfo) Reset() {
	*x = ChannelInfo{}
	mi := &file_proto_chat_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfo) ProtoMessage() {}

func (x *ChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfo.ProtoReflect.Descriptor instead.
func (*ChannelInfo) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{19}
}

func (x *ChannelInfo) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChannelInfo) GetChannelType() common.ChatChannel {
	if x != nil {
		return x.ChannelType
	}
	return common.ChatChannel(0)
}

func (x *ChannelInfo) GetMaxUsers() int32 {
	if x != nil {
		return x.MaxUsers
	}
	return 0
}

func (x *ChannelInfo) GetCurrentUsers() int32 {
	if x != nil {
		return x.CurrentUsers
	}
	return 0
}

func (x *ChannelInfo) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *ChannelInfo) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *ChannelInfo) GetModeratorIds() []string {
	if x != nil {
		return x.ModeratorIds
	}
	return nil
}

func (x *ChannelInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

// 聊天用户
type ChatUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	DisplayName   string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Status        UserStatus             `protobuf:"varint,4,opt,name=status,proto3,enum=greatestworks.chat.UserStatus" json:"status,omitempty"`
	StatusMessage string                 `protobuf:"bytes,5,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	Role          UserRole               `protobuf:"varint,6,opt,name=role,proto3,enum=greatestworks.chat.UserRole" json:"role,omitempty"`
	LastActive    int64                  `protobuf:"varint,7,opt,name=last_active,json=lastActive,proto3" json:"last_active,omitempty"`
	IsOnline      bool                   `protobuf:"varint,8,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatUser) Reset() {
	*x = ChatUser{}
	mi := &file_proto_chat_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatUser) ProtoMessage() {}

func (x *ChatUser) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatUser.ProtoReflect.Descriptor instead.
func (*ChatUser) Descriptor() ([]byte, []int) {
	return file_proto_chat_proto_rawDescGZIP(), []int{20}
}

func (x *ChatUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ChatUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChatUser) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ChatUser) GetStatus() UserStatus {
	if x != nil {
		return x.Status
	}
	return UserStatus_USER_STATUS_UNSPECIFIED
}

func (x *ChatUser) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *ChatUser) GetRole() UserRole {
	if x != nil {
		return x.Role
	}
	return UserRole_USER_ROLE_UNSPECIFIED
}

func (x *ChatUser) GetLastActive() int64 {
	if x != nil {
		return x.LastActive
	}
	return 0
}

func (x *ChatUser) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

var File_proto_chat_proto protoreflect.FileDescriptor

const file_proto_chat_proto_rawDesc = "" +
	"\n" +
	"\x10proto/chat.proto\x12\x12greatestworks.chat\x1a\x12proto/common.proto\"\xf8\x02\n" +
	"\x12SendMessageRequest\x12\x1b\n" +
	"\tsender_id\x18\x01 \x01(\tR\bsenderId\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\x12;\n" +
	"\achannel\x18\x03 \x01(\x0e2!.greatestworks.common.ChatChannelR\achannel\x12\x1b\n" +
	"\ttarget_id\x18\x04 \x01(\tR\btargetId\x12B\n" +
	"\fmessage_type\x18\x05 \x01(\x0e2\x1f.greatestworks.chat.MessageTypeR\vmessageType\x12P\n" +
	"\bmetadata\x18\x06 \x03(\v24.greatestworks.chat.SendMessageRequest.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x90\x01\n" +
	"\x13SendMessageResponse\x12<\n" +
	"\x06common\x18\x01 \x01(\v2$.greatestworks.common.CommonResponseR\x06common\x12\x1d\n" +
	"\n" +
	"message_id\x18\x02 \x01(\tR\tmessageId\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\"\xf3\x01\n" +
	"\x12GetMessagesRequest\x12;\n" +
	"\achannel\x18\x01 \x01(\x0e2!.greatestworks.common.ChatChannelR\achannel\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x02 \x01(\tR\tchannelId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x05R\x05limit\x12)\n" +
	"\x10before_timestamp\x18\x05 \x01(\x03R\x0fbeforeTimestamp\x12'\n" +
	"\x0fafter_timestamp\x18\x06 \x01(\x03R\x0eafterTimestamp\"\xd6\x01\n" +
	"\x13GetMessagesResponse\x12<\n" +
	"\x06common\x18\x01 \x01(\v2$.greatestworks.common.CommonResponseR\x06common\x12;\n" +
	"\bmessages\x18\x02 \x03(\v2\x1f.greatestworks.chat.ChatMessageR\bmessages\x12D\n" +
	"\n" +
	"pagination\x18\x03 \x01(\v2$.greatestworks.common.PaginationInfoR\n" +
	"pagination\"\xa5\x01\n" +
	"\x12JoinChannelRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12;\n" +
	"\achannel\x18\x02 \x01(\x0e2!.greatestworks.common.ChatChannelR\achannel\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x03 \x01(\tR\tchannelId\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\"\xd8\x01\n" +
	"\x13JoinChannelResponse\x12<\n" +
	"\x06common\x18\x01 \x01(\v2$.greatestworks.common.CommonResponseR\x06common\x12B\n" +
	"\fchannel_info\x18\x02 \x01(\v2\x1f.greatestworks.chat.ChannelInfoR\vchannelInfo\x12?\n" +
	"\fonline_users\x18\x03 \x03(\v2\x1c.greatestworks.chat.ChatUserR\vonlineUsers\"\x8a\x01\n" +
	"\x13LeaveChannelRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12;\n" +
	"\achannel\x18\x02 \x01(\x0e2!.greatestworks.common.ChatChannelR\achannel\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x03 \x01(\tR\tchannelId\"T\n" +
	"\x14LeaveChannelResponse\x12<\n" +
	"\x06common\x18\x01 \x01(\v2$.greatestworks.common.CommonResponseR\x06common\"\x7f\n" +
	"\x18CreatePrivateChatRequest\x12\x1d\n" +
	"\n" +
	"creator_id\x18\x01 \x01(\tR\tcreatorId\x12'\n" +
	"\x0fparticipant_ids\x18\x02 \x03(\tR\x0eparticipantIds\x12\x1b\n" +
	"\tchat_name\x18\x03 \x01(\tR\bchatName\"\xb0\x01\n" +
	"\x19CreatePrivateChatResponse\x12<\n" +
	"\x06common\x18\x01 \x01(\v2$.greatestworks.common.CommonResponseR\x06common\x12\x17\n" +
	"\achat_id\x18\x02 \x01(\tR\x06chatId\x12<\n" +
	"\tchat_info\x18\x03 \x01(\v2\x1f.greatestworks.chat.ChannelInfoR\bchatInfo\"\xa1\x01\n" +
	"\x15GetOnlineUsersRequest\x12;\n" +
	"\achannel\x18\x01 \x01(\x0e2!.greatestworks.common.ChatChannelR\achannel\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x02 \x01(\tR\tchannelId\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\x04 \x01(\x05R\x06offset\"\xd0\x01\n" +
	"\x16GetOnlineUsersResponse\x12<\n" +
	"\x06common\x18\x01 \x01(\v2$.greatestworks.common.CommonResponseR\x06common\x122\n" +
	"\x05users\x18\x02 \x03(\v2\x1c.greatestworks.chat.ChatUserR\x05users\x12D\n" +
	"\n" +
	"pagination\x18\x03 \x01(\v2$.greatestworks.common.PaginationInfoR\n" +
	"pagination\"\x8e\x01\n" +
	"\x14SetUserStatusRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x126\n" +
	"\x06status\x18\x02 \x01(\x0e2\x1e.greatestworks.chat.UserStatusR\x06status\x12%\n" +
	"\x0estatus_message\x18\x03 \x01(\tR\rstatusMessage\"\x94\x01\n" +
	"\x15SetUserStatusResponse\x12<\n" +
	"\x06common\x18\x01 \x01(\v2$.greatestworks.common.CommonResponseR\x06common\x12=\n" +
	"\n" +
	"new_status\x18\x02 \x01(\x0e2\x1e.greatestworks.chat.UserStatusR\tnewStatus\"g\n" +
	"\x10BlockUserRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12$\n" +
	"\x0etarget_user_id\x18\x02 \x01(\tR\ftargetUserId\x12\x14\n" +
	"\x05block\x18\x03 \x01(\bR\x05block\"Q\n" +
	"\x11BlockUserResponse\x12<\n" +
	"\x06common\x18\x01 \x01(\v2$.greatestworks.common.CommonResponseR\x06common\"\xb2\x01\n" +
	"\x14ReportMessageRequest\x12\x1f\n" +
	"\vreporter_id\x18\x01 \x01(\tR\n" +
	"reporterId\x12\x1d\n" +
	"\n" +
	"message_id\x18\x02 \x01(\tR\tmessageId\x128\n" +
	"\x06reason\x18\x03 \x01(\x0e2 .greatestworks.chat.ReportReasonR\x06reason\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\"r\n" +
	"\x15ReportMessageResponse\x12<\n" +
	"\x06common\x18\x01 \x01(\v2$.greatestworks.common.CommonResponseR\x06common\x12\x1b\n" +
	"\treport_id\x18\x02 \x01(\tR\breportId\"\x92\x04\n" +
	"\vChatMessage\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\tR\tmessageId\x12\x1b\n" +
	"\tsender_id\x18\x02 \x01(\tR\bsenderId\x12\x1f\n" +
	"\vsender_name\x18\x03 \x01(\tR\n" +
	"senderName\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x12;\n" +
	"\achannel\x18\x05 \x01(\x0e2!.greatestworks.common.ChatChannelR\achannel\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x06 \x01(\tR\tchannelId\x12B\n" +
	"\fmessage_type\x18\a \x01(\x0e2\x1f.greatestworks.chat.MessageTypeR\vmessageType\x12\x1c\n" +
	"\ttimestamp\x18\b \x01(\x03R\ttimestamp\x12\x1b\n" +
	"\tis_edited\x18\t \x01(\bR\bisEdited\x12)\n" +
	"\x10edited_timestamp\x18\n" +
	" \x01(\x03R\x0feditedTimestamp\x12I\n" +
	"\bmetadata\x18\v \x03(\v2-.greatestworks.chat.ChatMessage.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe8\x02\n" +
	"\vChannelInfo\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tR\tchannelId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12D\n" +
	"\fchannel_type\x18\x04 \x01(\x0e2!.greatestworks.common.ChatChannelR\vchannelType\x12\x1b\n" +
	"\tmax_users\x18\x05 \x01(\x05R\bmaxUsers\x12#\n" +
	"\rcurrent_users\x18\x06 \x01(\x05R\fcurrentUsers\x12\x1d\n" +
	"\n" +
	"is_private\x18\a \x01(\bR\tisPrivate\x12\x19\n" +
	"\bowner_id\x18\b \x01(\tR\aownerId\x12#\n" +
	"\rmoderator_ids\x18\t \x03(\tR\fmoderatorIds\x12\x1d\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\x03R\tcreatedAt\"\xb1\x02\n" +
	"\bChatUser\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x126\n" +
	"\x06status\x18\x04 \x01(\x0e2\x1e.greatestworks.chat.UserStatusR\x06status\x12%\n" +
	"\x0estatus_message\x18\x05 \x01(\tR\rstatusMessage\x120\n" +
	"\x04role\x18\x06 \x01(\x0e2\x1c.greatestworks.chat.UserRoleR\x04role\x12\x1f\n" +
	"\vlast_active\x18\a \x01(\x03R\n" +
	"lastActive\x12\x1b\n" +
	"\tis_online\x18\b \x01(\bR\bisOnline*\xf3\x01\n" +
	"\vMessageType\x12\x1c\n" +
	"\x18MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11MESSAGE_TYPE_TEXT\x10\x01\x12\x16\n" +
	"\x12MESSAGE_TYPE_EMOJI\x10\x02\x12\x16\n" +
	"\x12MESSAGE_TYPE_IMAGE\x10\x03\x12\x15\n" +
	"\x11MESSAGE_TYPE_FILE\x10\x04\x12\x16\n" +
	"\x12MESSAGE_TYPE_VOICE\x10\x05\x12\x17\n" +
	"\x13MESSAGE_TYPE_SYSTEM\x10\x06\x12\x1d\n" +
	"\x19MESSAGE_TYPE_ANNOUNCEMENT\x10\a\x12\x18\n" +
	"\x14MESSAGE_TYPE_COMMAND\x10\b*\xa1\x01\n" +
	"\n" +
	"UserStatus\x12\x1b\n" +
	"\x17USER_STATUS_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12USER_STATUS_ONLINE\x10\x01\x12\x14\n" +
	"\x10USER_STATUS_AWAY\x10\x02\x12\x14\n" +
	"\x10USER_STATUS_BUSY\x10\x03\x12\x19\n" +
	"\x15USER_STATUS_INVISIBLE\x10\x04\x12\x17\n" +
	"\x13USER_STATUS_OFFLINE\x10\x05*~\n" +
	"\bUserRole\x12\x19\n" +
	"\x15USER_ROLE_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10USER_ROLE_MEMBER\x10\x01\x12\x17\n" +
	"\x13USER_ROLE_MODERATOR\x10\x02\x12\x13\n" +
	"\x0fUSER_ROLE_ADMIN\x10\x03\x12\x13\n" +
	"\x0fUSER_ROLE_OWNER\x10\x04*\xd8\x01\n" +
	"\fReportReason\x12\x1d\n" +
	"\x19REPORT_REASON_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12REPORT_REASON_SPAM\x10\x01\x12\x1c\n" +
	"\x18REPORT_REASON_HARASSMENT\x10\x02\x12\x1d\n" +
	"\x19REPORT_REASON_HATE_SPEECH\x10\x03\x12\x1f\n" +
	"\x1bREPORT_REASON_INAPPROPRIATE\x10\x04\x12\x1a\n" +
	"\x16REPORT_REASON_CHEATING\x10\x05\x12\x17\n" +
	"\x13REPORT_REASON_OTHER\x10\x062\x91\a\n" +
	"\vChatService\x12^\n" +
	"\vSendMessage\x12&.greatestworks.chat.SendMessageRequest\x1a'.greatestworks.chat.SendMessageResponse\x12^\n" +
	"\vGetMessages\x12&.greatestworks.chat.GetMessagesRequest\x1a'.greatestworks.chat.GetMessagesResponse\x12^\n" +
	"\vJoinChannel\x12&.greatestworks.chat.JoinChannelRequest\x1a'.greatestworks.chat.JoinChannelResponse\x12a\n" +
	"\fLeaveChannel\x12'.greatestworks.chat.LeaveChannelRequest\x1a(.greatestworks.chat.LeaveChannelResponse\x12p\n" +
	"\x11CreatePrivateChat\x12,.greatestworks.chat.CreatePrivateChatRequest\x1a-.greatestworks.chat.CreatePrivateChatResponse\x12g\n" +
	"\x0eGetOnlineUsers\x12).greatestworks.chat.GetOnlineUsersRequest\x1a*.greatestworks.chat.GetOnlineUsersResponse\x12d\n" +
	"\rSetUserStatus\x12(.greatestworks.chat.SetUserStatusRequest\x1a).greatestworks.chat.SetUserStatusResponse\x12X\n" +
	"\tBlockUser\x12$.greatestworks.chat.BlockUserRequest\x1a%.greatestworks.chat.BlockUserResponse\x12d\n" +
	"\rReportMessage\x12(.greatestworks.chat.ReportMessageRequest\x1a).greatestworks.chat.ReportMessageResponseB8Z!greatestworks/internal/proto/chat\xaa\x02\x12GreatestWorks.Chatb\x06proto3"

var (
	file_proto_chat_proto_rawDescOnce sync.Once
	file_proto_chat_proto_rawDescData []byte
)

func file_proto_chat_proto_rawDescGZIP() []byte {
	file_proto_chat_proto_rawDescOnce.Do(func() {
		file_proto_chat_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_chat_proto_rawDesc), len(file_proto_chat_proto_rawDesc)))
	})
	return file_proto_chat_proto_rawDescData
}

var file_proto_chat_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_proto_chat_proto_goTypes = []any{
	(MessageType)(0),                  // 0: greatestworks.chat.MessageType
	(UserStatus)(0),                   // 1: greatestworks.chat.UserStatus
	(UserRole)(0),                     // 2: greatestworks.chat.UserRole
	(ReportReason)(0),                 // 3: greatestworks.chat.ReportReason
	(*SendMessageRequest)(nil),        // 4: greatestworks.chat.SendMessageRequest
	(*SendMessageResponse)(nil),       // 5: greatestworks.chat.SendMessageResponse
	(*GetMessagesRequest)(nil),        // 6: greatestworks.chat.GetMessagesRequest
	(*GetMessagesResponse)(nil),       // 7: greatestworks.chat.GetMessagesResponse
	(*JoinChannelRequest)(nil),        // 8: greatestworks.chat.JoinChannelRequest
	(*JoinChannelResponse)(nil),       // 9: greatestworks.chat.JoinChannelResponse
	(*LeaveChannelRequest)(nil),       // 10: greatestworks.chat.LeaveChannelRequest
	(*LeaveChannelResponse)(nil),      // 11: greatestworks.chat.LeaveChannelResponse
	(*CreatePrivateChatRequest)(nil),  // 12: greatestworks.chat.CreatePrivateChatRequest
	(*CreatePrivateChatResponse)(nil), // 13: greatestworks.chat.CreatePrivateChatResponse
	(*GetOnlineUsersRequest)(nil),     // 14: greatestworks.chat.GetOnlineUsersRequest
	(*GetOnlineUsersResponse)(nil),    // 15: greatestworks.chat.GetOnlineUsersResponse
	(*SetUserStatusRequest)(nil),      // 16: greatestworks.chat.SetUserStatusRequest
	(*SetUserStatusResponse)(nil),     // 17: greatestworks.chat.SetUserStatusResponse
	(*BlockUserRequest)(nil),          // 18: greatestworks.chat.BlockUserRequest
	(*BlockUserResponse)(nil),         // 19: greatestworks.chat.BlockUserResponse
	(*ReportMessageRequest)(nil),      // 20: greatestworks.chat.ReportMessageRequest
	(*ReportMessageResponse)(nil),     // 21: greatestworks.chat.ReportMessageResponse
	(*ChatMessage)(nil),               // 22: greatestworks.chat.ChatMessage
	(*ChannelInfo)(nil),               // 23: greatestworks.chat.ChannelInfo
	(*ChatUser)(nil),                  // 24: greatestworks.chat.ChatUser
	nil,                               // 25: greatestworks.chat.SendMessageRequest.MetadataEntry
	nil,                               // 26: greatestworks.chat.ChatMessage.MetadataEntry
	(common.ChatChannel)(0),           // 27: greatestworks.common.ChatChannel
	(*common.CommonResponse)(nil),     // 28: greatestworks.common.CommonResponse
	(*common.PaginationInfo)(nil),     // 29: greatestworks.common.PaginationInfo
}
var file_proto_chat_proto_depIdxs = []int32{
	27, // 0: greatestworks.chat.SendMessageRequest.channel:type_name -> greatestworks.common.ChatChannel
	0,  // 1: greatestworks.chat.SendMessageRequest.message_type:type_name -> greatestworks.chat.MessageType
	25, // 2: greatestworks.chat.SendMessageRequest.metadata:type_name -> greatestworks.chat.SendMessageRequest.MetadataEntry
	28, // 3: greatestworks.chat.SendMessageResponse.common:type_name -> greatestworks.common.CommonResponse
	27, // 4: greatestworks.chat.GetMessagesRequest.channel:type_name -> greatestworks.common.ChatChannel
	28, // 5: greatestworks.chat.GetMessagesResponse.common:type_name -> greatestworks.common.CommonResponse
	22, // 6: greatestworks.chat.GetMessagesResponse.messages:type_name -> greatestworks.chat.ChatMessage
	29, // 7: greatestworks.chat.GetMessagesResponse.pagination:type_name -> greatestworks.common.PaginationInfo
	27, // 8: greatestworks.chat.JoinChannelRequest.channel:type_name -> greatestworks.common.ChatChannel
	28, // 9: greatestworks.chat.JoinChannelResponse.common:type_name -> greatestworks.common.CommonResponse
	23, // 10: greatestworks.chat.JoinChannelResponse.channel_info:type_name -> greatestworks.chat.ChannelInfo
	24, // 11: greatestworks.chat.JoinChannelResponse.online_users:type_name -> greatestworks.chat.ChatUser
	27, // 12: greatestworks.chat.LeaveChannelRequest.channel:type_name -> greatestworks.common.ChatChannel
	28, // 13: greatestworks.chat.LeaveChannelResponse.common:type_name -> greatestworks.common.CommonResponse
	28, // 14: greatestworks.chat.CreatePrivateChatResponse.common:type_name -> greatestworks.common.CommonResponse
	23, // 15: greatestworks.chat.CreatePrivateChatResponse.chat_info:type_name -> greatestworks.chat.ChannelInfo
	27, // 16: greatestworks.chat.GetOnlineUsersRequest.channel:type_name -> greatestworks.common.ChatChannel
	28, // 17: greatestworks.chat.GetOnlineUsersResponse.common:type_name -> greatestworks.common.CommonResponse
	24, // 18: greatestworks.chat.GetOnlineUsersResponse.users:type_name -> greatestworks.chat.ChatUser
	29, // 19: greatestworks.chat.GetOnlineUsersResponse.pagination:type_name -> greatestworks.common.PaginationInfo
	1,  // 20: greatestworks.chat.SetUserStatusRequest.status:type_name -> greatestworks.chat.UserStatus
	28, // 21: greatestworks.chat.SetUserStatusResponse.common:type_name -> greatestworks.common.CommonResponse
	1,  // 22: greatestworks.chat.SetUserStatusResponse.new_status:type_name -> greatestworks.chat.UserStatus
	28, // 23: greatestworks.chat.BlockUserResponse.common:type_name -> greatestworks.common.CommonResponse
	3,  // 24: greatestworks.chat.ReportMessageRequest.reason:type_name -> greatestworks.chat.ReportReason
	28, // 25: greatestworks.chat.ReportMessageResponse.common:type_name -> greatestworks.common.CommonResponse
	27, // 26: greatestworks.chat.ChatMessage.channel:type_name -> greatestworks.common.ChatChannel
	0,  // 27: greatestworks.chat.ChatMessage.message_type:type_name -> greatestworks.chat.MessageType
	26, // 28: greatestworks.chat.ChatMessage.metadata:type_name -> greatestworks.chat.ChatMessage.MetadataEntry
	27, // 29: greatestworks.chat.ChannelInfo.channel_type:type_name -> greatestworks.common.ChatChannel
	1,  // 30: greatestworks.chat.ChatUser.status:type_name -> greatestworks.chat.UserStatus
	2,  // 31: greatestworks.chat.ChatUser.role:type_name -> greatestworks.chat.UserRole
	4,  // 32: greatestworks.chat.ChatService.SendMessage:input_type -> greatestworks.chat.SendMessageRequest
	6,  // 33: greatestworks.chat.ChatService.GetMessages:input_type -> greatestworks.chat.GetMessagesRequest
	8,  // 34: greatestworks.chat.ChatService.JoinChannel:input_type -> greatestworks.chat.JoinChannelRequest
	10, // 35: greatestworks.chat.ChatService.LeaveChannel:input_type -> greatestworks.chat.LeaveChannelRequest
	12, // 36: greatestworks.chat.ChatService.CreatePrivateChat:input_type -> greatestworks.chat.CreatePrivateChatRequest
	14, // 37: greatestworks.chat.ChatService.GetOnlineUsers:input_type -> greatestworks.chat.GetOnlineUsersRequest
	16, // 38: greatestworks.chat.ChatService.SetUserStatus:input_type -> greatestworks.chat.SetUserStatusRequest
	18, // 39: greatestworks.chat.ChatService.BlockUser:input_type -> greatestworks.chat.BlockUserRequest
	20, // 40: greatestworks.chat.ChatService.ReportMessage:input_type -> greatestworks.chat.ReportMessageRequest
	5,  // 41: greatestworks.chat.ChatService.SendMessage:output_type -> greatestworks.chat.SendMessageResponse
	7,  // 42: greatestworks.chat.ChatService.GetMessages:output_type -> greatestworks.chat.GetMessagesResponse
	9,  // 43: greatestworks.chat.ChatService.JoinChannel:output_type -> greatestworks.chat.JoinChannelResponse
	11, // 44: greatestworks.chat.ChatService.LeaveChannel:output_type -> greatestworks.chat.LeaveChannelResponse
	13, // 45: greatestworks.chat.ChatService.CreatePrivateChat:output_type -> greatestworks.chat.CreatePrivateChatResponse
	15, // 46: greatestworks.chat.ChatService.GetOnlineUsers:output_type -> greatestworks.chat.GetOnlineUsersResponse
	17, // 47: greatestworks.chat.ChatService.SetUserStatus:output_type -> greatestworks.chat.SetUserStatusResponse
	19, // 48: greatestworks.chat.ChatService.BlockUser:output_type -> greatestworks.chat.BlockUserResponse
	21, // 49: greatestworks.chat.ChatService.ReportMessage:output_type -> greatestworks.chat.ReportMessageResponse
	41, // [41:50] is the sub-list for method output_type
	32, // [32:41] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_proto_chat_proto_init() }
func file_proto_chat_proto_init() {
	if File_proto_chat_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_chat_proto_rawDesc), len(file_proto_chat_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_chat_proto_goTypes,
		DependencyIndexes: file_proto_chat_proto_depIdxs,
		EnumInfos:         file_proto_chat_proto_enumTypes,
		MessageInfos:      file_proto_chat_proto_msgTypes,
	}.Build()
	File_proto_chat_proto = out.File
	file_proto_chat_proto_goTypes = nil
	file_proto_chat_proto_depIdxs = nil
}
